{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Emperor",
	"patterns": [
		{
			"include": "#keywords"
		},
		{
			"include": "#comments"
		},
		{
			"include": "#constants"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#globalImports"
		},
		{
			"include": "#chars"
		},
		{
			"include": "#variables"
		},
		{
			"include": "#className"
		}
	],
	"repository": {
		"keywords": {
			"patterns": [
				{
					"name": "keyword.control.emperor",
					"match": "\\b(if|else|return|while|repeat|with|switch|for)\\b"
				},
				{
					"name": "storage.modifier.import.emperor",
					"match": "\\b(import)\\b"
				},
				{
					"name": "storage.modifier.package.emperor",
					"match": "\\b(module)\\b"
				},
				{
					"name": "keyword.control.blockEnd.emperor",
					"match": "#"
				},
				{
					"name": "keyword.control.less.emperor",
					"match": "@"
				},
				{
					"name": "keyword.operator.emperor",
					"match": "(<-|->|;)"
				},
				{
					"name": "keyword.operator.new.emperor",
					"match": "(::|<:|<~)"
				},
				{
					"name": "storage.type.emperor",
					"match": "\\b(int|char|bool|string|real|Any)\\b",
					"comment": "Getting () to work?"
				}
			]
		},
		"comments": {
			"patterns": [
				{
					"name": "comment.line.double-slash",
					"begin": "//",
					"end": "\n"
				},
				{
					"name": "comment.block",
					"begin": "/\\*",
					"end": "\\*/"
				}
			]
		},
		"constants": {
			"patterns": [
				{
					"name": "constant.language.emperor",
					"match": "\\b(true|false)\\b"
				},
				{
					"name": "constant.numeric.emperor",
					"match": "\\b\\d+(\\.\\d+)?\\b"
				}
			]
		},
		"strings": {
			"name": "string.quoted.double.emperor",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.emperor",
					"match": "\\\\(.|\\n)"
				}
			]
		},
		"globalImports": {
			"name": "string.quoted.other.emperor",
			"match": "(<[^\\s>][^>]*>)",
			"captures": {
				"1": {
					"patterns": [
						{
							"name": "invalid.illegal.emperor",
							"match": "\\\\"
						}
					]
				}
			}
		},
		"chars": {
			"name": "string.quoted.single.emperor",
			"match": "\\b'((\\\\)|([^'\\\\])|(\\\\.))'\\b",
			"captures": {
				"2": {
					"patterns": [
						{
							"name": "invalid.illegal.emperor",
							"match": "\\\\"
						}
					]
				},
				"4": {
					"patterns": [
						{
							"name": "constant.character.escape.emperor",
							"match": "\\\\."
						}
					]
				}
			}
		},
		"variables": {
			"name": "support.function.emperor",
			"match": "\\b[a-z][a-zA-Z]*\\b"
		},
		"className": {
			"name": "support.class.emperor",
			"match": "\\b[A-Z][A-Za-z]*\\b"
		}
	},
	"scopeName": "source.emperor"
}